from aiogram.utils.exceptions import InvalidQueryID
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from messages import WELCOME_MESSAGE
from urllib.parse import urlparse, parse_qs
import urllib
import urllib.request
import requests
import urllib.request
from http.cookiejar import CookieJar
import pymorphy2
import re
from bs4 import BeautifulSoup
from urllib.parse import quote
import json


YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
FOLDER_ID="FOLDER_ID"
YANDEX_IAM_TOKEN = "YANDEX_IAM_TOKEN"


load_dotenv()
BOT_TOKEN = os.environ.get('BOT_TOKEN')

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class RandomRecipeState(StatesGroup):
    waiting_for_cuisine_type = State()
    generating_recipe = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
morph = pymorphy2.MorphAnalyzer()

# –°—Ç–æ–ø-—Å–ª–æ–≤–∞
STOPWORDS = {"–∏", "—Å", "–≤", "–Ω–∞", "–¥–ª—è", "–ø–æ", "–∏–∑", "–∞", "–∏–ª–∏", "–æ—Ç", "–±–µ–∑"}

def lemmatize_word(word):
    """–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ (–ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è)"""
    return morph.parse(word)[0].normal_form

def lemmatize_text(text):
    """–õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: —É–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ª–µ–º–º–∞–º"""
    words = re.split(r"[^\w]+", text.lower())  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    return [lemmatize_word(word) for word in words if word and word not in STOPWORDS]

def fetch_reviews(dish):
    url = f"https://www.gastronom.ru/search?search={quote(dish)}&pageType=recipepage"
    print(url)

    try:
        req = urllib.request.Request(url, None)
        cj = CookieJar()
        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
        response = opener.open(req)

        raw_response = response.read().decode('utf-8', errors='ignore')
        response.close()

        soup = BeautifulSoup(raw_response, 'html.parser')

        # –õ–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keywords = set(lemmatize_text(dish))

        recipes_links = []
        recipe_titles = []
        recipe_image_urls = []

        all_links = soup.find_all('a', class_="_link_iku8o_14", itemprop="url")
        for link in all_links:
            href = link.get('href')
            if href and "recipe" in href:
                parent_div = link.find_next('a', class_="_name_iku8o_19")
                if parent_div:
                    title_tag = parent_div.find('span', itemprop="name")
                    if title_tag:
                        recipe_title = title_tag.get_text(strip=True).lower()

                        # –õ–µ–º–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—Ü–µ–ø—Ç–∞
                        title_keywords = set(lemmatize_text(recipe_title))

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                        if user_keywords.issubset(title_keywords):
                            recipes_links.append(f"https://www.gastronom.ru{href}")
                            recipe_titles.append(recipe_title)

                            image_tag = link.find('img', itemprop="image")
                            recipe_image_urls.append(
                                image_tag.get('src') if image_tag else None
                            )


        print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:", recipes_links)
        print("–ù–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥:", recipe_titles)
        print("URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", recipe_image_urls)

        return recipes_links, recipe_titles, recipe_image_urls

    except urllib.request.HTTPError as inst:
        output = format(inst)
        print(output)
        return [], [], []


def fetch_ingredients_from_first_recipe(recipes_links):
    if not recipes_links:
        return [], None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π

    first_link = recipes_links[0]
    response = requests.get(first_link)
    soup = BeautifulSoup(response.text, 'html.parser')

    # –ò—â–µ–º –±–ª–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ä—Ü–∏–π
    portions_div = soup.find('div', class_="_text_1prcq_11", itemprop="recipeYield")
    portions = None
    if portions_div:
        portions_text = portions_div.get_text(strip=True)
        if "–ü–æ—Ä—Ü–∏–π:" in portions_text:
            portions = portions_text.split("–ü–æ—Ä—Ü–∏–π:")[-1].strip()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π

    # –ò—â–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingredients_div = soup.find('div', class_="_ingredients_1r0sn_28")
    if not ingredients_div:
        return [], portions

    ingredients = []
    ingredient_tags = ingredients_div.find_all('div', itemprop="recipeIngredient")
    for tag in ingredient_tags:
        ingredient = tag.get_text(strip=True)
        ingredients.append(ingredient)

    print("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:", ingredients)
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", portions)
    return ingredients, portions



def search_ingredient_online(ingredient):
    search_query = f"–∫—É–ø–∏—Ç—å {ingredient} –≤ –º–æ—Å–∫–≤–µ"
    search_url = f"https://www.google.com/search?q={search_query}&tbm=shop"

    response = requests.get(search_url, headers={"User-Agent": "Mozilla/5.0"})
    if response.status_code != 200:
        return None

    soup = BeautifulSoup(response.text, 'html.parser')

    links = []
    for item in soup.find_all('a', href=True):
        href = item['href']
        if "url?q=" in href and not "webcache" in href:
            parsed_url = parse_qs(urlparse(href).query).get('q', [None])[0]
            if parsed_url:
                links.append(parsed_url)

    return links[0] if links else None

class RecipeStates(StatesGroup):
    waiting_for_recipe_name = State()

async def send_message(chat_id: int, text: str, reply_markup=None):
    await bot.send_message(chat_id, text, reply_markup=reply_markup)

async def send_message_with_menu(chat_id: int, text: str):
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton(text="—è —Ö–æ—á—É —Å—Ç–∞—Ç—å –∂–µ–Ω—â–∏–Ω–æ–π...", callback_data="first_button"))
    await send_message(chat_id, text, reply_markup=keyboard)

async def send_sticker(chat_id: int, sticker_id: str):
    await bot.send_sticker(chat_id, sticker_id)

keyboard_inline = InlineKeyboardMarkup().add(InlineKeyboardButton(text="—è —Ö–æ—á—É —Å—Ç–∞—Ç—å –∂–µ–Ω—â–∏–Ω–æ–π...", callback_data="first_button"))
button_menu = KeyboardButton("–≤ –º–µ–Ω—é")
keyboard_reply = ReplyKeyboardMarkup(resize_keyboard=True).add(button_menu)


@dp.callback_query_handler(text="button_one")
async def button_one_handler(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ:")
    await RecipeStates.waiting_for_recipe_name.set()
    await call.answer()

@dp.message_handler(state=RecipeStates.waiting_for_recipe_name, content_types=types.ContentType.TEXT)
async def recipe_name_handler(message: types.Message, state: FSMContext):
    if message.text == "–≤ –º–µ–Ω—é" or message.text == '/menu':
        await send_message_with_menu(message.chat.id, WELCOME_MESSAGE)
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    recipe_name = message.text

    await message.answer("–ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...ü´¶")
    recipe_links, recipe_titles, recipe_image_urls = fetch_reviews(recipe_name)

    if not recipe_links:
        await message.answer("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.finish()
        return

    await state.update_data(recipe_links=recipe_links, recipe_titles=recipe_titles, recipe_image_urls=recipe_image_urls)

    await show_recipe(message, state, recipe_index=0)

async def show_recipe(message: types.Message, state: FSMContext, recipe_index: int):
    data = await state.get_data()
    recipe_links = data['recipe_links']
    recipe_titles = data['recipe_titles']
    recipe_image_urls = data['recipe_image_urls']

    if recipe_index >= len(recipe_links):
        await message.answer("–ë–æ–ª—å—à–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ—Ç.")
        await state.finish()
        return

    images_to_send = recipe_image_urls[recipe_index:recipe_index + 3]
    keyboard = InlineKeyboardMarkup(row_width=3)

    for i, image_url in enumerate(images_to_send):
        if image_url:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            recipe_title = recipe_titles[recipe_index + i] if recipe_index + i < len(recipe_titles) else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            button = InlineKeyboardButton(
                text=f"–†–µ—Ü–µ–ø—Ç {i + 1}",
                callback_data=f"select_image_{recipe_index + i}"  # –ò–Ω–¥–µ–∫—Å —Ä–µ—Ü–µ–ø—Ç–∞ —É–Ω–∏–∫–∞–ª–µ–Ω
            )
            keyboard.add(button)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_photo(message.chat.id, image_url, caption=recipe_title)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", reply_markup=keyboard)


next_recipe_keyboard = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("–î–∞", callback_data="end_recipe_view"),
    InlineKeyboardButton("–ù–µ—Ç", callback_data="show_next_recipe"),
)

@dp.callback_query_handler(lambda c: c.data == "recipe_accept", state=RecipeStates.waiting_for_recipe_name)
async def handle_recipe_accept(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")
    await state.finish()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data == "recipe_reject", state=RecipeStates.waiting_for_recipe_name)
async def handle_recipe_reject(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_recipe_index = data.get("current_recipe_index", 0)
    await show_recipe(call.message, state, recipe_index=current_recipe_index + 1)  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("select_image_"),
                           state=RecipeStates.waiting_for_recipe_name)
async def select_image_handler(call: types.CallbackQuery, state: FSMContext):
    parts = call.data.split("_")
    if len(parts) != 3:
        await call.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞.")
        return

    try:
        recipe_index = int(parts[2])
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ—Ü–µ–ø—Ç–∞.")
        return

    data = await state.get_data()
    recipe_links = data.get('recipe_links', [])
    recipe_titles = data.get('recipe_titles', [])

    if recipe_index < 0 or recipe_index >= len(recipe_links):
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ—Ü–µ–ø—Ç–∞.")
        return

    selected_recipe_link = recipe_links[recipe_index]
    selected_recipe_title = recipe_titles[recipe_index]
    ingredients, portions = fetch_ingredients_from_first_recipe([selected_recipe_link])

    if not ingredients:
        await call.message.answer("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.finish()
        return

    await bot.send_message(call.message.chat.id, selected_recipe_title, reply_to_message_id=call.message.message_id)

    await call.message.answer(
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç: [—Ç—ã–∫]({selected_recipe_link})",
        parse_mode="Markdown",
        disable_web_page_preview=True,
    )
    await call.message.answer(f"–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π –≤ —Ä–µ—Ü–µ–ø—Ç–µ: {portions}")

    result_message = "üç¥ **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞** üç¥\n\n"
    for idx, ingredient in enumerate(ingredients, start=1):
        purchase_link = search_ingredient_online(ingredient)
        if purchase_link:
            result_message += f"{idx}. **{ingredient}** üõí [–ö—É–ø–∏—Ç—å]({purchase_link})\n"
        else:
            result_message += f"{idx}. **{ingredient}** ‚ùå _–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_\n"

    await call.message.answer(
        result_message,
        parse_mode="Markdown",
        disable_web_page_preview=True,
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?"
    try:
        await call.message.answer("–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=next_recipe_keyboard)
    except InvalidQueryID:
        print("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å.")

    await state.update_data(current_recipe_index=recipe_index)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data in ["show_next_recipe", "end_recipe_view"], state=RecipeStates.waiting_for_recipe_name)
async def handle_next_recipe(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_recipe_index = data.get("current_recipe_index", 0)

    if call.data == "show_next_recipe":
        await show_recipe(call.message, state, recipe_index=current_recipe_index + 1)
    elif call.data == "end_recipe_view":
        await call.message.answer("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")
        await state.finish()

    await call.answer()


@dp.callback_query_handler(text=["first_button"])
async def check_button(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ:")
    await RecipeStates.waiting_for_recipe_name.set()
    await call.answer()

@dp.message_handler(commands=['kushat'])
async def help_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ:")
    await RecipeStates.waiting_for_recipe_name.set()

'''     —Å—Ç–∞—Ä—Ç      '''
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=keyboard_inline)

@dp.message_handler(lambda message: message.text == "–≤ –º–µ–Ω—é")
async def menu_button_click(message: types.Message):
    await send_message_with_menu(message.chat.id, WELCOME_MESSAGE)

'''     menu      '''
@dp.message_handler(commands=['menu'])
async def menu_command(message: types.Message):
    await send_message_with_menu(message.chat.id, WELCOME_MESSAGE)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random
@dp.message_handler(commands=['random'])
async def random_command(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", callback_data="random_any_cuisine")
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è, —è–ø–æ–Ω—Å–∫–∞—è) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã':",
                         reply_markup=keyboard)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await RandomRecipeState.waiting_for_cuisine_type.set()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex LLM API
def extract_event_details(request_text):
    headers = {
        "Authorization": f"Bearer {YANDEX_IAM_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = form_payload(request_text)
    response = requests.post(YANDEX_API_URL, headers=headers, data=payload)

    if response.status_code == 200:
        result = response.json()
        text = result['result']['alternatives'][0]['message']['text']
        return text
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex LLM API: {response.status_code} {response.text}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"
@dp.callback_query_handler(lambda call: call.data == "random_any_cuisine", state=RandomRecipeState.waiting_for_cuisine_type)
async def random_any_cuisine_handler(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(flag=True)
    await call.message.answer("–ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...ü´¶")
    await call.answer()
    await process_random_recipe(call.message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç–∏–ø–æ–º –∫—É—Ö–Ω–∏
@dp.message_handler(state=RandomRecipeState.waiting_for_cuisine_type, content_types=types.ContentType.TEXT)
async def random_cuisine_handler(message: types.Message, state: FSMContext):
    cuisine_type = message.text.strip().lower()
    await state.update_data(flag=False, cuisine_type=cuisine_type)
    await message.answer("–ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...ü´¶")
    await process_random_recipe(message, state)


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex LLM API
def form_payload(request_text):
    return json.dumps({
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 1,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç 1 –∏–¥–µ—é –±–ª—é–¥–∞ –∫—É—Ö–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "
                        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, 2. —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞, 3. —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏ —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏. "
                        "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–∏—à–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –ë–ª—é–¥–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ. –†–µ—Ü–µ–ø—Ç: —Ä–µ—Ü–µ–ø—Ç. –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏: –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã."
            },
            {
                "role": "user",
                "text": request_text
            }
        ]
    })

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Yandex GPT
def parse_gpt_result(result):
    try:
        dish_name_start = result.find("–ë–ª—é–¥–æ: ") + len("–ë–ª—é–¥–æ: ")
        dish_name_end = result.find(". –†–µ—Ü–µ–ø—Ç: ")
        recipe_start = dish_name_end + len(". –†–µ—Ü–µ–ø—Ç: ")
        recipe_end = result.find(". –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏: ")
        ingredients_start = recipe_end + len(". –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏: ")

        dish_name = result[dish_name_start:dish_name_end].strip()
        recipe = result[recipe_start:recipe_end].strip()
        ingredients_list = result[ingredients_start:].strip()

        ingredients = [ing.strip() for ing in ingredients_list.split(",")]
        return dish_name, recipe, ingredients
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ GPT: {e}")

async def process_random_recipe(message_or_call, state: FSMContext, is_callback=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–µ—Ü–µ–ø—Ç–∞, –≤—ã–≤–æ–¥–∏—Ç –±–ª—é–¥–æ, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Ä–µ—Ü–µ–ø—Ç,
    –∞ —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        flag = data.get('flag', False)
        cuisine_type = data.get('cuisine_type', None) if not flag else "–ª—é–±–æ–π"

        request_text = (
            f"–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–Ω–æ –±–ª—é–¥–æ {cuisine_type} –∫—É—Ö–Ω–∏, —Ä–µ—Ü–µ–ø—Ç –∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏."
        )

        # –ï—Å–ª–∏ —ç—Ç–æ callback (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å), —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
        if is_callback:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ message_or_call –æ–±—ä–µ–∫—Ç–æ–º CallbackQuery
            if isinstance(message_or_call, types.CallbackQuery):
                await message_or_call.message.answer("–ò—â—É –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç...")
            else:
                await message_or_call.answer("–ò—â—É –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç...")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç —É GPT
        result = extract_event_details(request_text)
        dish_name, recipe, ingredients = parse_gpt_result(result)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = f"üç¥ **{dish_name}** üç¥\n\n"
        result_message += f"**–†–µ—Ü–µ–ø—Ç:** {recipe}\n\n"
        result_message += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –≤ —Ä–µ—Ü–µ–ø—Ç–µ: 2**\n\n"
        result_message += "**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"

        for idx, ingredient in enumerate(ingredients, start=1):
            purchase_link = search_ingredient_online(ingredient)
            if purchase_link:
                result_message += f"{idx}. {ingredient} üõí [–ö—É–ø–∏—Ç—å]({purchase_link})\n"
            else:
                result_message += f"{idx}. {ingredient} ‚ùå _–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if isinstance(message_or_call, types.CallbackQuery):
            await message_or_call.message.answer(result_message, parse_mode="Markdown", disable_web_page_preview=True)
        else:
            await message_or_call.answer(result_message, parse_mode="Markdown", disable_web_page_preview=True)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        next_recipe_keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–î–∞", callback_data="accept_recipe"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="reject_recipe")
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ "–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?"
        if isinstance(message_or_call, types.CallbackQuery):
            await message_or_call.message.answer("–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=next_recipe_keyboard)
        else:
            await message_or_call.answer("–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=next_recipe_keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(RandomRecipeState.generating_recipe.state)
        await state.update_data(previous_request_text=request_text)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if isinstance(message_or_call, types.CallbackQuery):
            await message_or_call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        else:
            await message_or_call.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ù–µ—Ç")
@dp.callback_query_handler(lambda call: call.data == "reject_recipe", state=RandomRecipeState.generating_recipe)
async def handle_reject_recipe(call: types.CallbackQuery, state: FSMContext):
    await process_random_recipe(call, state, is_callback=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–î–∞")
@dp.callback_query_handler(lambda call: call.data == "accept_recipe", state=RandomRecipeState.generating_recipe)
async def handle_accept_recipe(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçΩ")
    await state.finish()
    await call.answer()

if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except KeyboardInterrupt:
        print("Bot stopped by user.")