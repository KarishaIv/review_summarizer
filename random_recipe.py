from imports import *
import json
from chosen_recipe import  search_ingredient_online, dp


YANDEX_API_URL = os.environ.get('YANDEX_API_URL')
FOLDER_ID = os.environ.get('FOLDER_ID')
YANDEX_IAM_TOKEN = os.environ.get('YANDEX_IAM_TOKEN')


class RandomRecipeState(StatesGroup):
    waiting_for_cuisine_type = State()
    generating_recipe = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/random"
@dp.message_handler(commands=['random'])
async def random_command(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text="–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", callback_data="random_any_cuisine")
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è, —è–ø–æ–Ω—Å–∫–∞—è) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã':",
                         reply_markup=keyboard)
    await RandomRecipeState.waiting_for_cuisine_type.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"
@dp.callback_query_handler(lambda call: call.data == "random_any_cuisine", state=RandomRecipeState.waiting_for_cuisine_type)
async def random_any_cuisine_handler(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(flag=True)
    await call.message.answer("–ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...ü´¶")
    await call.answer()
    await process_random_recipe(call.message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç–∏–ø–æ–º –∫—É—Ö–Ω–∏
@dp.message_handler(state=RandomRecipeState.waiting_for_cuisine_type, content_types=types.ContentType.TEXT)
async def random_cuisine_handler(message: types.Message, state: FSMContext):
    cuisine_type = message.text.strip().lower()
    await state.update_data(flag=False, cuisine_type=cuisine_type)
    await message.answer("–ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...ü´¶")
    await process_random_recipe(message, state)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex LLM API
def extract_event_details(request_text):
    headers = {
        "Authorization": f"Bearer {YANDEX_IAM_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = form_payload(request_text)
    response = requests.post(YANDEX_API_URL, headers=headers, data=payload)

    if response.status_code == 200:
        result = response.json()
        text = result['result']['alternatives'][0]['message']['text']
        return text
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex LLM API: {response.status_code} {response.text}")


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex LLM API
def form_payload(request_text):
    return json.dumps({
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 1,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç 1 –∏–¥–µ—é –±–ª—é–¥–∞ –∫—É—Ö–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "
                        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, 2. —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞, 3. —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏ —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏. "
                        "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–∏—à–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –ë–ª—é–¥–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ. –†–µ—Ü–µ–ø—Ç: —Ä–µ—Ü–µ–ø—Ç. –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏: –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã."
            },
            {
                "role": "user",
                "text": request_text
            }
        ]
    })

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Yandex GPT
def parse_gpt_result(result):
    try:
        dish_name_start = result.find("–ë–ª—é–¥–æ: ") + len("–ë–ª—é–¥–æ: ")
        dish_name_end = result.find(". –†–µ—Ü–µ–ø—Ç: ")
        recipe_start = dish_name_end + len(". –†–µ—Ü–µ–ø—Ç: ")
        recipe_end = result.find(". –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏: ")
        ingredients_start = recipe_end + len(". –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏: ")

        dish_name = result[dish_name_start:dish_name_end].strip()
        recipe = result[recipe_start:recipe_end].strip()
        ingredients_list = result[ingredients_start:].strip()

        ingredients = [ing.strip() for ing in ingredients_list.split(",")]
        return dish_name, recipe, ingredients
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ GPT: {e}")

async def process_random_recipe(message_or_call, state: FSMContext, is_callback=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–µ—Ü–µ–ø—Ç–∞, –≤—ã–≤–æ–¥–∏—Ç –±–ª—é–¥–æ, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Ä–µ—Ü–µ–ø—Ç,
    –∞ —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        flag = data.get('flag', False)
        cuisine_type = data.get('cuisine_type', None) if not flag else "–ª—é–±–æ–π"

        request_text = (
            f"–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–Ω–æ –±–ª—é–¥–æ {cuisine_type} –∫—É—Ö–Ω–∏, —Ä–µ—Ü–µ–ø—Ç –∏ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 2 –ø–æ—Ä—Ü–∏–∏."
        )

        # –ï—Å–ª–∏ —ç—Ç–æ callback (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å), —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
        if is_callback:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ message_or_call –æ–±—ä–µ–∫—Ç–æ–º CallbackQuery
            if isinstance(message_or_call, types.CallbackQuery):
                await message_or_call.message.answer("–ò—â—É –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç...")
            else:
                await message_or_call.answer("–ò—â—É –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç...")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç —É GPT
        result = extract_event_details(request_text)
        dish_name, recipe, ingredients = parse_gpt_result(result)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = f"üç¥ **{dish_name}** üç¥\n\n"
        result_message += f"**–†–µ—Ü–µ–ø—Ç:** {recipe}\n\n"
        result_message += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –≤ —Ä–µ—Ü–µ–ø—Ç–µ: 2**\n\n"
        result_message += "**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"

        for idx, ingredient in enumerate(ingredients, start=1):
            purchase_link = search_ingredient_online(ingredient)
            if purchase_link:
                result_message += f"{idx}. {ingredient} üõí [–ö—É–ø–∏—Ç—å]({purchase_link})\n"
            else:
                result_message += f"{idx}. {ingredient} ‚ùå _–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if isinstance(message_or_call, types.CallbackQuery):
            await message_or_call.message.answer(result_message, parse_mode="Markdown", disable_web_page_preview=True)
        else:
            await message_or_call.answer(result_message, parse_mode="Markdown", disable_web_page_preview=True)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        next_recipe_keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("–î–∞", callback_data="accept_recipe"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="reject_recipe")
        ).row(
            InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="menu")
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ "–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?"
        if isinstance(message_or_call, types.CallbackQuery):
            await message_or_call.message.answer("–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=next_recipe_keyboard)
        else:
            await message_or_call.answer("–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=next_recipe_keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(RandomRecipeState.generating_recipe.state)
        await state.update_data(previous_request_text=request_text)

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if isinstance(message_or_call, types.CallbackQuery):
            await message_or_call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        else:
            await message_or_call.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ù–µ—Ç")
@dp.callback_query_handler(lambda call: call.data == "reject_recipe", state=RandomRecipeState.generating_recipe)
async def handle_reject_recipe(call: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    await process_random_recipe(call, state, is_callback=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–î–∞")
@dp.callback_query_handler(lambda call: call.data == "accept_recipe", state=RandomRecipeState.generating_recipe)
async def handle_accept_recipe(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçΩ")
    await state.finish()
    await call.answer()
