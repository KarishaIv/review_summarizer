import pytest
from unittest.mock import MagicMock, AsyncMock, patch
from aiogram import types
from aiogram.types import  CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher


from main import (
    dp,
    RecipeStates,
    button_one_handler,
    check_button,
    handle_recipe_accept,
    handle_recipe_reject,
    select_image_handler,
    handle_next_recipe,
    show_recipe,
    recipe_name_handler
)


@pytest.fixture
def callback_query():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è callback_query"""
    mock_cb = MagicMock(spec=CallbackQuery)
    mock_cb.message = MagicMock(spec=types.Message)
    mock_cb.message.chat.id = 123456789
    mock_cb.message.answer = AsyncMock()
    mock_cb.message.edit_text = AsyncMock()
    mock_cb.answer = AsyncMock()
    mock_cb.from_user = MagicMock(id=12345, is_bot=False, first_name="TestUser")
    return mock_cb


@pytest.fixture
def fsm_context():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FSM."""
    fsm = MagicMock(spec=FSMContext)
    fsm.set_state = AsyncMock()
    fsm.finish = AsyncMock()
    fsm.update_data = AsyncMock()
    fsm.get_data = AsyncMock(return_value={})
    return fsm


@pytest.mark.asyncio
async def test_first_button_handler(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ first_button.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –±–ª—é–¥–æ –∏ –ø–µ—Ä–µ–π–¥—ë—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_recipe_name.
    """
    callback_query.data = "first_button"
    with patch("main.RecipeStates.waiting_for_recipe_name.set", new_callable=AsyncMock) as mock_set_state:
        await check_button(callback_query)
        callback_query.message.answer.assert_called_once_with("–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ:")
        mock_set_state.assert_awaited_once()


@pytest.mark.asyncio
async def test_button_one_handler(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ button_one.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –±–ª—é–¥–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_recipe_name.
    """
    callback_query.data = "button_one"
    with patch("main.RecipeStates.waiting_for_recipe_name.set", new_callable=AsyncMock) as mock_set_state:
        await button_one_handler(callback_query)
        callback_query.message.answer.assert_called_once_with("–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ:")
        mock_set_state.assert_awaited_once()


@pytest.mark.asyncio
async def test_handle_recipe_accept(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç —Å–∫–∞–∂–µ—Ç "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!" –∏ –∑–∞–≤–µ—Ä—à–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    callback_query.data = "recipe_accept"

    await handle_recipe_accept(callback_query, fsm_context)

    callback_query.message.answer.assert_called_once_with("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")
    fsm_context.finish.assert_awaited_once()

@pytest.mark.asyncio
async def test_handle_recipe_reject(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ä–µ—Ü–µ–ø—Ç–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç.
    """
    callback_query.data = "recipe_reject"
    with patch("main.show_recipe", new_callable=AsyncMock) as mock_show_recipe:
        fsm_context.get_data.return_value = {"current_recipe_index": 0}

        await handle_recipe_reject(callback_query, fsm_context)
        mock_show_recipe.assert_awaited_once_with(callback_query.message, fsm_context, recipe_index=1)


@pytest.mark.asyncio
async def test_handle_next_recipe_show_next(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ show_next_recipe.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç.
    """
    callback_query.data = "show_next_recipe"
    fsm_context.get_data.return_value = {"current_recipe_index": 0}

    with patch("main.show_recipe", new_callable=AsyncMock) as mock_show_recipe:
        await handle_next_recipe(callback_query, fsm_context)
        mock_show_recipe.assert_awaited_once_with(callback_query.message, fsm_context, recipe_index=1)


@pytest.mark.asyncio
async def test_handle_next_recipe_end_view(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ end_recipe_view.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –ø–æ–∂–µ–ª–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    callback_query.data = "end_recipe_view"

    await handle_next_recipe(callback_query, fsm_context)
    callback_query.message.answer.assert_called_once_with("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")
    fsm_context.finish.assert_awaited_once()

@pytest.mark.asyncio
async def test_show_recipe_no_more_recipes(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    fsm_context.get_data.return_value = {
        "recipe_links": [],
        "recipe_titles": [],
        "recipe_image_urls": []
    }

    await show_recipe(callback_query.message, fsm_context, recipe_index=0)
    callback_query.message.answer.assert_called_once_with("–ë–æ–ª—å—à–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ—Ç.")
    fsm_context.finish.assert_awaited_once()

@pytest.mark.asyncio
async def test_check_button_sets_state(callback_query):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "—è —Ö–æ—á—É —Å—Ç–∞—Ç—å –∂–µ–Ω—â–∏–Ω–æ–π...".
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –±–ª—é–¥–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    callback_query.data = "first_button"

    Dispatcher.set_current(dp)

    with patch.object(RecipeStates.waiting_for_recipe_name, 'set', new_callable=AsyncMock) as mock_set_state:
        await check_button(callback_query)
        callback_query.message.answer.assert_called_once_with("–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ:")
        mock_set_state.assert_awaited_once()


@pytest.mark.asyncio
async def test_restaurant_name_handler_no_results(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã".
    """
    fsm_context.get_data.return_value = {}
    callback_query.message.text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ"

    with patch("main.fetch_reviews", return_value=([], [], [])):
        await recipe_name_handler(callback_query.message, fsm_context)

        callback_query.message.answer.assert_any_call("–ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...ü´¶")

        callback_query.message.answer.assert_any_call("–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –≤—ã–∑—ã–≤–∞–ª—Å—è —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ä–∞–∑–∞
        assert callback_query.message.answer.call_count == 2

        fsm_context.finish.assert_awaited_once()


@pytest.mark.asyncio
async def test_select_image_handler_invalid_data(callback_query, fsm_context):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    –û–∂–∏–¥–∞–µ—Ç—Å—è: –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    callback_query.data = "select_image_invalid"

    await select_image_handler(callback_query, fsm_context)

    callback_query.answer.assert_called_once_with("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ—Ü–µ–ø—Ç–∞.")

